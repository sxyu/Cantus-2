Welcome to Cantus Version {ver}!

Cantus is a powerful yet lightweight mathematical language and expression evaluator 
created By Alex Yu 2015-16
https://github.com/sxyu/Cantus-GUI

*********************************************************************************************
Credits
*********************************************************************************************
This project wouldn't have been possible without the following:

Scintilla: Textbox with syntax matching, etc. by antoniolinares, johnsoonj, kapix93, 
nyamatongwe, other contributors
http://www.scintilla.org/
License: http://www.scintilla.org/License.txt

Scintilla.NET: .NET control, wrapper & bindings for Scintilla:  by Jacob Slusser (License: MIT)
https://github.com/jacobslusser/ScintillaNET

BigDecimal Class: .Net arbitrary precison library
By Jan Christoph Bernack (contact: jc.bernack at googlemail.com)
Found: http://stackoverflow.com/a/4524254

EmbeddedAssembly Class: Class to simplify embedding dlls within the executable by Adriancs
Found: http://www.codeproject.com/Articles/528178/Load-DLL-From-Embedded-Resource 

*********************************************************************************************
What's new in 2.4.6.116
*********************************************************************************************
-Operator = is now smarter and is evaluated at two precedences
-Fixed an issue where the or operator is evaluated before the and operator
  The logical operators should now work as expected
-The virtual console separator is now shorter
-Fixed a bug where using print() or printline() when running a script from the editor
  will print to the same line as the original text
-Minor fixes

*********************************************************************************************
New from in 2.4.5.115
*********************************************************************************************
-No longer saves init.can in current directory
-Minor bug fixes

*********************************************************************************************
New from in 2.4.5.114
*********************************************************************************************
-Block mode in console no longer prints the result of the evaluation twice
-'Bare' flag for console fixed
-Fixed duplicate entry in help text

*********************************************************************************************
New from 2.4.5.113
*********************************************************************************************
-The evaluator property OutputFormat has been renamed to OutputMode
-The corresponding enum type eOutputFormat has been renamed to OutputFormat
-Various minor fixes

*********************************************************************************************
New from in 2.4.4.112
*********************************************************************************************
-The window can now be resized & maximized
-There is now a splitter that allows you to resize the console and the editor
-The on-screen keyboard is now on a separate window
-Each run in the editor is now performed on a fresh evaluator
-Before each plugin is loaded all modes are now reset to default values
-Minor fixes

*********************************************************************************************
New from 2.4.3.110
*********************************************************************************************
-Added isupper() islower() isdigit() isletter() ispunctuation() etc. functions to ease
  detection of character types
-Fixed a bug where continuing in the last loop of a for/while/repeat loop will raise an error
  saying continue statements are invalid in block mode
-The virtual console no longer (erroneously) appends a new line character after a string 
  printed with print() (as opposed to printline())
-Other minor bug fixes

*********************************************************************************************
New from 2.4.3.109
*********************************************************************************************
-Fixed a bug where the path of the cantus executable was incorrectly detected as the
  current console path
-Improved run() function to use a callback lambda function
-Hashset and set creation from lists no longer creates extra unnecessary references
-basedir() function renamed to currentdir()
-Added execdir() execpath() functions to identify the path/directory of the current script

*********************************************************************************************
New from 2.4.2.108
*********************************************************************************************
-Matrices are better and more consistently formatted in output
-select() function now supports full matrices (preserves row/column structure)
-Fixed a bug with the union() function for sets
-symmetricdifference() function renamed to differencesymmetric()

*********************************************************************************************
New from 2.4.1.107
*********************************************************************************************
-Fixed a bug with the explicit mode keyboard shortcut
-Sgn (sign) function now supports arbitrary precision decimals
-Math output mode now supports arbitrary precision decimals

*********************************************************************************************
New from 2.4.1.106
*********************************************************************************************
-Fixed user function arguments
-Fixed version number ver() -- returns assembly instead of file version
-Added some path functions (getext())

*********************************************************************************************
New from 2.4.1.105
*********************************************************************************************
-Fixed the broken modulo operator
-Modulo operator now respects significant figures
-Fixed the manual critical point finding system
-Round, floor, ceil, truncate, abs functions now support arbitrary precision decimals
-PI and E are now defined very precisely -- to 400 decimal places!
-When switching to sig figs mode, automatically detects number of sig figs on existing
  variables. When switching from sig figs mode, automatically sets all variables to 
  infinitely precise.
-Fixed an exception that occurs when rapidly typing in the textbox while modifying options
  in the graphing window
-Fixed crashes that occur sometimes when closing the console window

*********************************************************************************************
New from 2.4.0.103
*********************************************************************************************
-Fixed updater

*********************************************************************************************
New from 2.4.0.102
*********************************************************************************************
-Fixed log function
-Min, max functions now support arbitrary precision
-Decimal numbers starting with multiple zeros no longer identified as octal 
  (which raises an error)
-Removed unnecessary references

*********************************************************************************************
New from 2.4.0.97
*********************************************************************************************
General
-Separated application into multiple files: core library is now a separate project
-New console interpreter: can.exe. Run directly to run in interactive mode.

Console
-Interactive mode: simply run can.exe to run commands line-by-line. End any line with ':' to temporarily enter block mode.
-Block mode: run 'can -b' to run blocks. Expressions are run line-by-line using a ScriptFeeder,
  but no result is returned until 'return' is used.
-Execute a file: run 'can <filename>'. The .can extension may be omitted: to run test.can, you may type 'can test'
-Quick evaluation: use 'can <expression>' to quickly evaluate an expression. E.g. 'can 1+2 * 3' returns 7.
  Spaces are ignored.

Core
-Sig figs mode (Hotkey Ctrl+Alt+F): Keep track of sig figs during all calculations. 
  Automatically rounds when necessary.
-Added ScriptFeeder class for executing scripts part-by-part, on-demand

GUI
-The 'my results' section is now an interactive virtual console
	-Supports read, print, and clear
	-End a line with ':' to use block mode. This lets you run multiple statements at once and
	  use statements such as if and while.

*********************************************************************************************
New from 2.3.0.92
*********************************************************************************************
-New logo (designed by myself)!
-The window is no longer always on top, so you can move things above Cantus while working
-All of the application now uses Open Sans (embedded)
-Added a number of animations to the UI

-The translucency button (top right, left of minimize) now cycles 
  3 different translucencies -- Opaque, slightly translucent, almost transparent

-Note you can no longer snap the keyboard or the console -- but you can collapse the keyboard
  by pressing "x" on the top right

-PREVIOUSLY STANDARD FUNCTIONS ALERT() INPUT() HAVE BEEN REMOVED. 
  Input can now only be done with 
    read() readline() readchar() confirm() yesno()
  And output only print() and printline() 
  When no console is available the Cantus evaluator will ask the GUI for input,
    prompting the user if needed.

-Improved graphing mode so that it is almost as good as it was initially
  (before I made the evaluator so much more complicated/slower)
-Slight speed improvement
-More minor fixes
*********************************************************************************************
New from 2.2.0.91
*********************************************************************************************
-New window (snappable to the editor) on the left side
  -My Results: Store important answers here. 
   Press Alt+Enter to evaluate the current expression and write it to this window
  -Graph: Same as the old graphing window
-Better support for optional/named arguments, now works as expected
-Multi-line strings: """ Use triple quotes 
 """
-Improved syntax highlighting and auto-completion in the editOr -Added save and open buttons to the editor as well as the shortcuts Ctrl+S and Ctrl+O
  (Older shortcuts F11 and F12 still available)
-Editor is now slightly taller
-Minor fixes

*********************************************************************************************
New from 2.1.3.89
*********************************************************************************************
-Minor fixes

*********************************************************************************************
New from 2.1.2.87
*********************************************************************************************
-Added basic autocompletion
-Fixed a bug where class member functions could no longer access other fields in the instance
  after a reload
-Other minor bug fixes

*********************************************************************************************
New from 2.1.1.86
*********************************************************************************************
-Textbox with syntax highlighting, brace pairing, and line numbers using Scintilla.NET
-Fixed some broken buttons on the right on-screen keyboard

-'Choose' operator no longer rounds operands to the nearest integer and now
  accepts negative operands

-Integration, differentiation, summation, and product functions
  have been updated to use lambda expressions and function pointers.
  TRY: dydx(sin) on the graphing window

-Minor fixes

*********************************************************************************************
New from 2.1.0.85
*********************************************************************************************
-Wider, larger editor with more keyboard buttons

-OOP: support for classes, multiple inheritance, etc.

OOP format example:
# Tip: you can copy this into the editor to see the result for yourself!

class pet
	name = ""
	function init(name)
		this.name = name
	function text()
		return "Pet name: " + name

class cat : pet
	function init(name)
		this.name = name
	function speak()
		return "Meow!"
	function text()
		return "Cat name: " + name

myCat = cat("Alex")
printline(myCat) # prints Cat name: Alex
printline(myCat.speak()) # prints Meow!

-Static keyword to make a variable shared across all class instances
-Access modifiers: public, private
-Lambda expressions: `123`, `x=>123`
-Function pointers: x=sin
-Multi-line lambda expressions: 
	max = ` x,y =>
	    if x>y
			return x
		else
			return y
	`
-Namespacing: create namespaces with the namespace keyword

-Import statement to import a package from any path path or from under 'include/' using member access notation:
	import cantus_xyz.foo
  will import from include/cantus_xyz/foo from under the directory

  **Items in imported packages may be accessed directly without any access qualifiers**

-Use the load statement to make a package available for use (with its full path) without importing it.
-If you aren't sure how to call a function just find it in the 'insert function' dialog using Alt+F

-Explicit mode: force declaration of variables (with let/global/private/public/static)
  This is now available as an option in the settings panel in the GUI (Alt+S)

-New data structures: linkedlist() hashset()
-Use a reference to move through the linkedlist:
	a = lst.first() # outputs first item
	alert(a.type()) # alerts 'Reference'
	a.next() # outputs second item
	a.remove() # removes second item, outputs new second item
	a.prev() # outputs first item

-Default number of spaces per tab changed to 2 from 4

-All system functions are now prefixed with _, the older ones are now deprecated
-The 'OMode' setting is now called 'Output Format'
-Numerous minor fixes

*********************************************************************************************
New From 2.0.0.83
*********************************************************************************************
-Changed buttons on bottom of left keyboard
-Fixed crash when using clipboard() function
-Applied fix to prevent internalization of functions and variables declared in other files
-Minor fixes

*********************************************************************************************
New From 2.0.0.75:
*********************************************************************************************
-Greatly reduced flickering on launch
-Minor fixes

*********************************************************************************************
New From 2.0.0.68:
*********************************************************************************************
-New expression evaluator, featuring Python-like
  syntax, tuples, matrices, sets/dictionaries, complex numbers, etc.

-Old functions and variables from Calculatorˣ are cleared on this
  upgrade as the formats are no longer compatible

-New dialog: Insert Function
  The prevans button to the left of ans has been changed to "f(x)".
  Click this new button to choose a function from all defined
  functions.

-Almost everything is now asynchronous and non-blocking, each
  evaluation is done on a different thread,
  and graphics is drawn on a different thread in the graphing
  calculatOr 
-Added Increment/Decrement/Operator AND assign operators 
  (++, --, +=, -=, etc.)
-Operator = now supports both assignment and comparison
  Use == to force comparison or := to force assignment
-Chain assignment with = or := like a=b=c=3 now possible
-Tuple assignment like a,b=b,a or a,b,c=1

-Self-referring notation: [1,2,3].add(3) or a.removeat(4) etc.
-Tuple self-referring notation: (a,b).min()

-Indexing: a[0], {"hello":2}["hello"], ""
'Slicing: a[0:1], a[0:]

-String escape sequences "\n\xA" "\""
-Single quoted strings and raw strings: r""

-Comments: # this is a comment. 
  All characters after # are ignored

-Various new constants (overridable) like
 i h hbar A(avogadro's number)
 To reload defaults use reloadconstants() 
  or allclear() (will delete everything!)

-A note on case sensitivity: Cantus is partially case sensitive.
  Internal functions like sin and statements like if are case INSENSITIVE.
  However, user-defined variables and functions are case SENSITIVE.

-If many items with the same name are defined, then resolves in this order:
  Variables > User Functions > Internal Functions

-Variable resolution: left to right, longest before shortest (abc->ab*c before a*b*c)
-Function resolution: longest from right side, all to left treated as variables

*********************************************************************************************
New Internal Functions:
*********************************************************************************************

-run() runs/evaluates a script with the path given
       on a new thread
-runwait() runs the script on the same thread

-start() starts a new process from the file at the path
         given
-startwait() starts a new process from the file at the path
             given and waits for completion

-async() or $() runs the expression on a new thread 
                (result saved to result)

-each(collection, expr) do something to each item in 
        the collection (refer to each item as 'this'
        in expr, or call functions with ".[function]")
        e.g. [1,2,3].each("this+=2") returns [3,4,5]
        e.g. [0,pi/2,pi].each("a+=.sin()") adds 1 to a

-isprime() primality check
-regexmatch(), regexmatchall(), regexismatch() regex stuff
-wildcardmatch() match wildcards

-Hash() IntHash() MD5Hash() SHA1Hash() SHA2Hash() hashing

-EncryptAES() DecryptAES() AES/Rijndael symmetric key encryption

-ListDir() ListFiles() ListDirs()
  DeleteFile() DeleteDir() MoveFile() MoveDir()
  RenameFile() RenameDir() FileExists() DirExists()
  JoinPath() GetFileName() GetDirName() BaseDir() CantusPath()
  (New filesystem and path functions)

*********************************************************************************************
Statements in New Evaluator:
*********************************************************************************************

-Blocks are similar to those in python and evaluated with indentation.
  However, you don't add ':' after statements

-A random block example:
 if filename="1.txt"
    renamefile(joinpath(basedir(),filename), "2.txt")
 else
    alert("Good")
    

-A list of all blocks
  if <cond> 
    elif <cond> 
    else

  for <name> in <collection>
  for <name>,<name2>,... in <collection>
  for <name>=<initial value> to <bound, excl.> step <step>

  while <cond>
  until <cond>
  repeat <number>
  run

  try
    catch
    catch <name>
    finally

  with <name> # refer to variable as 'this' or run functions like
              # .add(x) without a variable name

  continue/break/return <any>

  'Then' chaining:  Run Then Repeat 2 Then Repeat 3
                       DoStuff()

  Declare Functions:
  function [name]([param1], [param2], ...)
       DoSomething()

  Declare Scoped Variables (overrides higher scope):
  let a=b 
  # Note: you can also do a=b but if a is declared in
  # a higher scope then this will assign to that variable

  Declare Global Variables
  global a=b
 
*********************************************************************************************
New Types:
*********************************************************************************************

Matrices
-Create matrices: [1,2,3], [[1,2],[3,4]], [[1,,],[,2,]] (blanks become zeros)
                  or matrix(2,2) (creates 2x2 matrix filled with zeros)
-Matrix functions: transpose() inverse() determinant() multiply(,) scale(,)
                   pow(,) rref() append() add() remove() removeat() reverse() 
                   shuffle() column() row() columns() rows() len() length()
                   height() width() index() indexcircular() cycle() etc. etc.
-Matrix operators: * (scalar mul. or matrix mul) + - / (scalar div.)

Vectors
-Create column vectors (actually matrices): [1,2,3,4,5]
-Column vector-specific functions: dot() cross()
-Vector operators: * (dot product) ** (cross product) + - * /
-Most matrix functions can also be used

Sets
-Create set: {1,2,3,4,5}
-Set functions: union() intersection() difference() 
                symmetricdifference() add() remove() len()
-Set operators: * (intersection) + (union) - (difference) ^^ (symm. diff.)

Dictionaries
-Create dictionary: {"a":"b", "b","c"}
-Same functions and operators as set, but items can be accessed like dict["name"]

Tuples
-Create tuple: (1,2,3) or just 1,2,3
-Tuples have no related functions, they are meant to be used internally or in
  tuple assignments a,b=b,a or in self-referring calls (a,b).func()

Complex Numbers
-Create complex: complex(real, [imaginary]) or frompolar(magnitude, phase)
-You can also just use the 'i' (imaginary unit) constant: (1+2i)
-Complex-specific functions: real() imag() conjugate() phase() magnitude()
-Most normal functions (e.g. trig) and operators work for complex as well